<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music App</title>
    <link rel="stylesheet" href="style.css">

    <!-- YouTube API -->
    <script src="https://www.youtube.com/iframe_api"></script>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-database.js"></script>
</head>
<body>
    <div id="top-container">
        <div id="left-container">
            <div id="player"></div>

            <div id="controls-container">
                <div id="seek-bar-container">
                    <button id="prev-btn">⏮️</button>
                    <input type="range" id="seek-bar" min="0" value="0">
                    <button id="next-btn">⏭️</button>
                </div>
                <div id="play-pause-container">
                    <button id="play-pause-btn">▶️</button>
                </div>
            </div>
        </div>

        <!-- Sign-In/Sign-Out -->
        <div id="auth-container">
            <button id="login-btn">Sign in with Google</button>
            <button id="logout-btn" style="display:none;">Sign out</button>
        </div>
    </div>

    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyBFfY5CZScu8FdE2oLjaCTQ3H5WbAQXos8",
            authDomain: "musicapp-3a435.firebaseapp.com",
            databaseURL: "https://your-project-id.firebaseio.com/",
            projectId: "musicapp-3a435",
            storageBucket: "musicapp-3a435.appspot.com",
            messagingSenderId: "224181252004",
            appId: "1:224181252004:web:4589e9da0d6400e5fd1b31"
        };

        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.database().ref("playback");

        let player;
        let playlist = ["dQw4w9WgXcQ", "JGwWNGJdvx8", "3JZ_D3ELwOQ"]; // Default YouTube Video IDs
        let currentIndex = 0;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '225',
                width: '400',
                videoId: playlist[currentIndex],
                playerVars: { 'playsinline': 1 },
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        function onPlayerReady(event) {
            auth.onAuthStateChanged(user => {
                if (user) {
                    syncPlayback();
                }
            });
            updateSeekBar();
        }

        function onPlayerStateChange(event) {
            if (event.data === YT.PlayerState.PLAYING || event.data === YT.PlayerState.PAUSED) {
                updateFirebase();
            }
        }

        function syncPlayback() {
            db.on("value", snapshot => {
                if (snapshot.exists()) {
                    const data = snapshot.val();
                    if (data.videoId !== player.getVideoData().video_id) {
                        player.loadVideoById(data.videoId, data.currentTime);
                    } else {
                        player.seekTo(data.currentTime);
                        if (data.isPlaying) {
                            player.playVideo();
                        } else {
                            player.pauseVideo();
                        }
                    }
                }
            });
        }

        function updateFirebase() {
            db.set({
                videoId: player.getVideoData().video_id,
                currentTime: player.getCurrentTime(),
                isPlaying: player.getPlayerState() === YT.PlayerState.PLAYING
            });
        }

        // Play/Pause Button
        document.getElementById("play-pause-btn").addEventListener("click", () => {
            const state = player.getPlayerState();
            if (state === YT.PlayerState.PLAYING) {
                player.pauseVideo();
            } else {
                player.playVideo();
            }
        });

        // Seek Bar (Fast Forward & Rewind)
        const seekBar = document.getElementById("seek-bar");
        function updateSeekBar() {
            setInterval(() => {
                seekBar.max = player.getDuration();
                seekBar.value = player.getCurrentTime();
            }, 1000);
        }

        seekBar.addEventListener("input", () => {
            player.seekTo(seekBar.value);
        });

        // Previous/Next Buttons
        document.getElementById("prev-btn").addEventListener("click", () => {
            currentIndex = (currentIndex - 1 + playlist.length) % playlist.length;
            player.loadVideoById(playlist[currentIndex]);
            updateFirebase();
        });

        document.getElementById("next-btn").addEventListener("click", () => {
            currentIndex = (currentIndex + 1) % playlist.length;
            player.loadVideoById(playlist[currentIndex]);
            updateFirebase();
        });

        // Google Authentication
        const loginBtn = document.getElementById("login-btn");
        const logoutBtn = document.getElementById("logout-btn");

        loginBtn.addEventListener("click", () => {
            const provider = new firebase.auth.GoogleAuthProvider();
            auth.signInWithPopup(provider);
        });

        logoutBtn.addEventListener("click", () => {
            auth.signOut();
        });

        auth.onAuthStateChanged(user => {
            if (user) {
                loginBtn.style.display = "none";
                logoutBtn.style.display = "block";
                syncPlayback();
            } else {
                loginBtn.style.display = "block";
                logoutBtn.style.display = "none";
                db.off();
            }
        });

    </script>
</body>
</html>
